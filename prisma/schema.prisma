// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["darwin", "windows", "debian-openssl-3.0.x"]
}

// generator class_validator {
//   provider = "prisma-class-validator-generator"
//   output = "../src/dto"
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  /// Is Admin
  isAdmin Boolean @default(false)
  /// Name
  name String
  /// Image
  image String?
  
  password String
  /// Email
  email String @unique

  emailVerified DateTime? @map("email_verified")
  /// About
  about String?

  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  reviews Review[]

  bookings Booking[]

  @@map("user")
}

enum RoomType {
  basic
  luxury
  suite
}

type OfferedAmenities {
  /// Icon
  icon String
  /// Amenity
  amenity String
}

model HotelRoom {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  /// Name
  name String
  /// Slug
  slug String @unique
  /// Place
  place String
  /// Description
  description String?
  /// Price
  price Float
  /// Discount
  discount Float?
  /// Images
  images String[]
  /// Cover Image
  coverImage String @map("cover_image")
  /// Room Type
  type RoomType
  /// Special Note
  specialNote String @map("special_note") @default("Check-in time is 12:00 PM, checkout time is 11:59 AM. If you leave behind any items, please contact the receptionist.")
  /// Dimension
  dimension String?
  /// Number Of Beds
  numberOfBeds Int @map("number_of_beds") @default(1)
  /// Offered Amentities
  offeredAmenities OfferedAmenities[]
  /// Is Featured
  isFeatured Boolean @map("is_featured") @default(false)
  /// Reviews
  reviews Review[]

  bookings Booking[]

  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@map("hotel_room")
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  /// Review Text
  text String
  /// User Rating
  userRating Int @map("user_rating")

  userId String @map("user_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  hotelRoomId String @map("hotel_room_id") @db.ObjectId
  hotelRoom HotelRoom @relation(fields: [hotelRoomId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@map("review")
}

model Booking {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  /// Check-in Date
  checkinDate DateTime @map("checkin_date")
  /// Check-out Date
  checkoutDate DateTime @map("checkout_date")
  ///Number Of Days
  numberOfDays Int @map("number_of_days")
  /// Discout
  discount Float
  /// Adults
  adults Int
  /// Children
  children Int
  /// Total Price
  totalPrice Float @map("total_price")

  userId String @map("user_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  hotelRoomId String @map("hotel_room_id") @db.ObjectId
  hotelRoom HotelRoom @relation(fields: [hotelRoomId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@map("booking")

}
